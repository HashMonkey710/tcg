# Project Structure & Initial Setup

## 1. Flutter Project Initialization
```bash
flutter create mtg_arena_clone
cd mtg_arena_clone
```

## 2. pubspec.yaml - Dependencies Configuration
```yaml
name: mtg_arena_clone
description: A professional MTG Arena clone with Discord-style UI
publish_to: 'none'
version: 1.0.0+1

environment:
  sdk: '>=3.0.0 <4.0.0'
  flutter: ">=3.10.0"

dependencies:
  flutter:
    sdk: flutter

  # State Management
  flutter_bloc: ^8.1.6
  bloc: ^8.1.4
  
  # Dependency Injection
  get_it: ^7.6.4
  injectable: ^2.3.2
  
  # Database
  sqflite_common_ffi: ^2.3.0+4
  sqflite: ^2.3.0
  path: ^1.8.3
  path_provider: ^2.1.1
  
  # Network & API
  http: ^1.1.0
  dio: ^5.3.3
  connectivity_plus: ^5.0.1
  
  # Image Handling
  cached_network_image: ^3.3.0
  image: ^4.1.3
  
  # JSON & Serialization
  json_annotation: ^4.8.1
  freezed_annotation: ^2.4.1
  
  # Utilities
  equatable: ^2.0.5
  dartz: ^0.10.1
  intl: ^0.18.1
  uuid: ^4.1.0
  
  # UI & Theming
  google_fonts: ^6.1.0
  flutter_svg: ^2.0.9
  
  # File & Storage
  shared_preferences: ^2.2.2
  
  # OCR for card recognition (Phase 3)
  google_mlkit_text_recognition: ^0.9.0
  camera: ^0.10.5+5

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^3.0.0
  
  # Code Generation
  build_runner: ^2.4.7
  json_serializable: ^6.7.1
  injectable_generator: ^2.4.1
  freezed: ^2.4.6
  
  # Testing
  bloc_test: ^9.1.5
  mockito: ^5.4.2
  mocktail: ^1.0.0

flutter:
  uses-material-design: true
  assets:
    - assets/images/
    - assets/icons/
    - assets/data/
```

## 3. Project Folder Structure
```
lib/
├── main.dart
├── app.dart
├── injection.dart
├── core/
│   ├── constants/
│   │   ├── app_constants.dart
│   │   ├── api_constants.dart
│   │   └── db_constants.dart
│   ├── errors/
│   │   ├── exceptions.dart
│   │   └── failures.dart
│   ├── network/
│   │   ├── network_info.dart
│   │   └── api_client.dart
│   ├── theme/
│   │   ├── app_theme.dart
│   │   ├── discord_colors.dart
│   │   └── app_text_styles.dart
│   ├── utils/
│   │   ├── extensions.dart
│   │   ├── helpers.dart
│   │   └── validators.dart
│   └── widgets/
│       ├── base_widgets.dart
│       ├── loading_widgets.dart
│       └── error_widgets.dart
├── features/
│   ├── cards/
│   │   ├── data/
│   │   │   ├── datasources/
│   │   │   │   ├── card_local_data_source.dart
│   │   │   │   └── card_remote_data_source.dart
│   │   │   ├── models/
│   │   │   │   ├── card_model.dart
│   │   │   │   └── card_model.g.dart
│   │   │   └── repositories/
│   │   │       └── card_repository_impl.dart
│   │   ├── domain/
│   │   │   ├── entities/
│   │   │   │   └── card.dart
│   │   │   ├── repositories/
│   │   │   │   └── card_repository.dart
│   │   │   └── usecases/
│   │   │       ├── get_cards.dart
│   │   │       ├── search_cards.dart
│   │   │       └── sync_cards.dart
│   │   └── presentation/
│   │       ├── bloc/
│   │       │   ├── card_bloc.dart
│   │       │   ├── card_event.dart
│   │       │   ├── card_state.dart
│   │       │   ├── search_bloc.dart
│   │       │   ├── search_event.dart
│   │       │   └── search_state.dart
│   │       ├── pages/
│   │       │   ├── card_browser_page.dart
│   │       │   └── card_detail_page.dart
│   │       └── widgets/
│   │           ├── card_grid.dart
│   │           ├── card_item.dart
│   │           ├── card_search_bar.dart
│   │           └── card_filters.dart
│   ├── decks/
│   │   ├── data/
│   │   │   ├── datasources/
│   │   │   │   └── deck_local_data_source.dart
│   │   │   ├── models/
│   │   │   │   ├── deck_model.dart
│   │   │   │   └── deck_card_model.dart
│   │   │   └── repositories/
│   │   │       └── deck_repository_impl.dart
│   │   ├── domain/
│   │   │   ├── entities/
│   │   │   │   ├── deck.dart
│   │   │   │   └── deck_card.dart
│   │   │   ├── repositories/
│   │   │   │   └── deck_repository.dart
│   │   │   └── usecases/
│   │   │       ├── create_deck.dart
│   │   │       ├── update_deck.dart
│   │   │       ├── delete_deck.dart
│   │   │       ├── add_card_to_deck.dart
│   │   │       ├── remove_card_from_deck.dart
│   │   │       └── validate_deck.dart
│   │   └── presentation/
│   │       ├── bloc/
│   │       │   ├── deck_bloc.dart
│   │       │   ├── deck_event.dart
│   │       │   ├── deck_state.dart
│   │       │   ├── deck_builder_bloc.dart
│   │       │   ├── deck_builder_event.dart
│   │       │   └── deck_builder_state.dart
│   │       ├── pages/
│   │       │   ├── deck_list_page.dart
│   │       │   ├── deck_builder_page.dart
│   │       │   └── deck_detail_page.dart
│   │       └── widgets/
│   │           ├── deck_card.dart
│   │           ├── deck_stats.dart
│   │           ├── mana_curve.dart
│   │           └── deck_validation.dart
│   ├── collections/
│   │   ├── data/
│   │   ├── domain/
│   │   └── presentation/
│   └── home/
│       ├── data/
│       ├── domain/
│       └── presentation/
│           ├── bloc/
│           ├── pages/
│           │   └── home_page.dart
│           └── widgets/
│               ├── discord_sidebar.dart
│               ├── server_list.dart
│               └── channel_list.dart
└── shared/
    ├── data/
    │   ├── database/
    │   │   ├── app_database.dart
    │   │   ├── database_helper.dart
    │   │   └── migrations/
    │   │       └── migration_v1.dart
    │   └── api/
    │       ├── scryfall_api.dart
    │       └── api_endpoints.dart
    └── domain/
        ├── entities/
        └── repositories/

assets/
├── images/
│   ├── placeholder_card.png
│   └── app_logo.png
├── icons/
│   └── discord_icons/
└── data/
    └── fallback_cards.json

test/
├── unit/
│   ├── core/
│   ├── features/
│   └── shared/
├── integration/
└── widget/

android/
├── app/
│   └── src/
│       └── main/
│           ├── AndroidManifest.xml
│           └── kotlin/
ios/
├── Runner/
│   └── Info.plist
└── Runner.xcodeproj/

.github/
└── workflows/
    ├── ci.yml
    └── release.yml
```

## 4. Core Configuration Files

### analysis_options.yaml
```yaml
include: package:flutter_lints/flutter.yaml

analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
  errors:
    invalid_annotation_target: ignore
    
linter:
  rules:
    prefer_single_quotes: true
    sort_pub_dependencies: true
    prefer_relative_imports: true
    avoid_print: false
    avoid_slow_async_io: true
    cancel_subscriptions: true
    close_sinks: true
    literal_only_boolean_expressions: true
    no_adjacent_strings_in_list: true
    prefer_const_constructors: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    prefer_final_locals: true
    unnecessary_await_in_return: true
```

### .gitignore additions
```gitignore
# Custom additions
*.g.dart
*.freezed.dart
*.config.dart
coverage/
.nyc_output/
```

## 5. Initial File Templates

### lib/main.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'app.dart';
import 'injection.dart' as di;

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialize dependency injection
  await di.init();
  
  // Set preferred orientations
  await SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.landscapeLeft,
    DeviceOrientation.landscapeRight,
  ]);
  
  runApp(const MTGArenaCloneApp());
}
```

### lib/app.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'core/theme/app_theme.dart';
import 'features/home/presentation/pages/home_page.dart';
import 'injection.dart';

class MTGArenaCloneApp extends StatelessWidget {
  const MTGArenaCloneApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        // BLoC providers will be added here
      ],
      child: MaterialApp(
        title: 'MTG Arena Clone',
        theme: AppTheme.darkTheme,
        home: const HomePage(),
        debugShowCheckedModeBanner: false,
      ),
    );
  }
}
```

This establishes the foundation for our Clean Architecture with:
- ✅ Proper folder structure following Clean Architecture
- ✅ All necessary dependencies configured
- ✅ Separation of concerns (data/domain/presentation)
- ✅ BLoC pattern setup
- ✅ Database infrastructure ready
- ✅ API integration structure
- ✅ Testing framework
- ✅ Development tooling

Next step: Database implementation and core entities.
